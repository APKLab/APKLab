name: CI
on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name:
          - lint
          - linux-build-test
          - macos-build-test
          - windows-build-test
          - node16-build
        include:
          - name: lint
            os: ubuntu-20.04
            node: 14
          - name: linux-build-test
            os: ubuntu-20.04
            node: 14
            run_test: true
          - name: macos-build-test
            os: macos-latest
            node: 14
            run_test: true
          - name: windows-build-test
            os: windows-latest
            node: 14
            run_test: true
          - name: node16-build
            os: ubuntu-20.04
            node: 16

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: c-hive/gha-yarn-cache@v2
      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Run Linter
        if: matrix.name == 'lint'
        run: yarn lint
      - name: Package extension
        if: matrix.name != 'lint'
        run: yarn package
      - name: Install quark-engine
        continue-on-error: true
        if: matrix.run_test == true
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            export PATH="/home/runner/.local/bin:$PATH"
            pip install -U quark-engine
          elif [ "$RUNNER_OS" == "Windows" ]; then
            pip install -U quark-engine
          else
            python3 -m pip install -U quark-engine
          fi
          # get quark-engine rules
          freshquark
          # check if it installed properly
          quark --help
          quark -a testdata/simplekeyboard/test.apk -s
      - name: Run tests
        if: matrix.run_test == true
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            xvfb-run -a yarn test
          else
            yarn test
          fi
      - uses: actions/upload-artifact@v2
        if: matrix.name == 'linux-build-test'
        with:
          name: apklab.vsix
          path: apklab*.vsix

  release:
    name: release
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: c-hive/gha-yarn-cache@v2
      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Package extension
        run: yarn package
      - name: Release [open-vsx]
        run: |
          yarn add ovsx
          yarn ovsx publish apklab*.vsix -p ${{ secrets.OPEN_VSX_TOKEN }}
      - name: Release [marketplace]
        run: yarn vsce publish -p ${{ secrets.VS_MARKETPLACE_TOKEN }} --yarn
